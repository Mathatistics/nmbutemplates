gsub("::: (.+)", "\\\\begin{\\1}", y)
gsub("::: (.+)", "\\\begin{\\1}", y)
x
y <- x
gsub("::: (.+)", "\\\begin{\\1}", y)
gsub("::: (.+)", "\\\\begin{\\1}", y)
rmarkdown::render("stat123.Rmd")
if (is.function(post)) output = post(metadata, input, output, clean, verbose)
f <- xfun::with_ext(output, '.tex')
x <- xfun::read_utf8(f)
y <- x
grep("::: .+", y, value = TRUE)
sapply(grep("::: .+", y))
grep("::: .+", y)
env_idx <- grep("::: .+", y)
env_idx
env_start <- grep("::: .+", y)
grep(":::", y)
env_idx <- grep(":::", y)
env_idx
length(env_idx) %% 2
env_idx <- grep(":::", y)
if (!length(env_idx) %% 2) stop("Non closing custom block exists")
!length(env_idx) %% 2
length(env_idx) %% 2
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_idx
seq(1, length(env_idx))
seq(1, length(env_idx), 1)
seq(1, length(env_idx), 2)
list(
start = seq(1, length(env_idx), 2),
end = seq(2, length(env_idx), 2)
)
lapply(list(
start = seq(1, length(env_idx), 2),
end = seq(2, length(env_idx), 2)
), "[[", env_idx)
lapply(list(
start = seq(1, length(env_idx), 2),
end = seq(2, length(env_idx), 2)
), "[", env_idx)
env_pair <- list(
start = env_idx[seq(1, length(env_idx), 2)],
end = env_idx[seq(2, length(env_idx), 2)]
)
env_pair
y[env_pair$start]
gsub(":: (.+)", "\\1", y[env_pair$start])
gsub("::: (.+)", "\\1", y[env_pair$start])
trimws(gsub("::: (.+)", "\\1", y[env_pair$start]))
env_names <- trimws(gsub("::: (.+)", "\\1", y[env_pair$start]))
env_names
env_pair
t(env_pair)
as.list(t(env_pair))
unclass(t(env_pair))
str(t(env_pair))
t(env_pair)[1,]
env_pair
env_idx
seq_along(env_idx)
sapply(env_idx, "[", 1, 2)
sapply(seq(1, length(env_idx), 2), function(x){
c(env_idx[x], env_idx[x+1])
})
lapply(seq(1, length(env_idx), 2), function(x){
c(env_idx[x], env_idx[x+1])
})
env_pair <- lapply(seq(1, length(env_idx), 2), function(x){
c(env_idx[x], env_idx[x+1])
})
env_pair
env_idx <- grep(":::", y)
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_pair <- lapply(seq(1, length(env_idx), 2), function(x){
c(env_idx[x], env_idx[x+1])
})
env_names <- trimws(gsub("::: (.+)", "\\1", y[env_pair$start]))
for (idx in 1:length(env_pair)) {
ix <- env_pair[idx]
ename <- env_names[idx]
y[ix[1]] <- gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), y[ix[1]])
y[ix[2]] <- gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), y[ix[2]])
}
idx
y
idx
ix
ename
env_idx <- grep(":::", y)
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_pair <- lapply(seq(1, length(env_idx), 2), function(x){
c(env_idx[x], env_idx[x+1])
})
env_names <- trimws(gsub("::: (.+)", "\\1", y[env_pair$start]))
for (idx in 1:length(env_pair)) {
ix <- env_pair[[idx]]
ename <- env_names[idx]
y[ix[1]] <- gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), y[ix[1]])
y[ix[2]] <- gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), y[ix[2]])
}
y
env_idx <- grep(":::", y)
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_pair <- lapply(seq(1, length(env_idx), 2), function(x){
c(env_idx[x], env_idx[x+1])
})
env_names <- trimws(gsub("::: (.+)", "\\1", y[env_pair$start]))
for (idx in 1:length(env_pair)) {
ix <- env_pair[[idx]]
ename <- env_names[idx]
y[ix[1]] <- gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), y[ix[1]])
y[ix[2]] <- gsub(":::", paste0("\\\\end{", ename, "}"), y[ix[2]])
}
y
env_names
y <- x
env_idx <- grep(":::", y)
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_pair <- lapply(seq(1, length(env_idx), 2), function(x){
c(env_idx[x], env_idx[x+1])
})
env_names <- trimws(gsub("::: (.+)", "\\1", y[env_pair$start]))
for (idx in 1:length(env_pair)) {
ix <- env_pair[[idx]]
ename <- env_names[idx]
y[ix[1]] <- gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), y[ix[1]])
y[ix[2]] <- gsub(":::", paste0("\\\\end{", ename, "}"), y[ix[2]])
}
y
y <- x
env_idx <- grep(":::", y)
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_pair <- lapply(seq(1, length(env_idx), 2), function(x){
c(env_idx[x], env_idx[x+1])
})
env_names <- trimws(gsub("::: (.+)", "\\1", y[env_pair$start]))
envy
y
env_pair
sapply(env_pair, "[[", 1)
env_names <- trimws(gsub("::: (.+)", "\\1", y[sapply(env_pair, "[[", 1)]))
env_names
env_idx <- grep(":::", y)
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_pair <- lapply(seq(1, length(env_idx), 2), function(x){
c(env_idx[x], env_idx[x+1])
})
env_names <- trimws(gsub("::: (.+)", "\\1", y[sapply(env_pair, "[[", 1)]))
for (idx in 1:length(env_pair)) {
ix <- env_pair[[idx]]
ename <- env_names[idx]
y[ix[1]] <- gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), y[ix[1]])
y[ix[2]] <- gsub(":::", paste0("\\\\end{", ename, "}"), y[ix[2]])
}
y
env_idx <- grep(":::", x)
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_pair <- lapply(seq(1, length(env_idx), 2), function(y){
c(env_idx[y], env_idx[y+1])
})
env_names <- trimws(gsub("::: (.+)", "\\1", y[sapply(env_pair, "[[", 1)]))
for (idx in 1:length(env_pair)) {
ix <- env_pair[[idx]]
ename <- env_names[idx]
x[ix[1]] <- gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), x[ix[1]])
x[ix[2]] <- gsub(":::", paste0("\\\\end{", ename, "}"), x[ix[2]])
}
x
if (is.function(post)) output = post(metadata, input, output, clean, verbose)
f <- xfun::with_ext(output, '.tex')
x <- xfun::read_utf8(f)
env_idx <- grep(":::", x)
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_pair <- lapply(seq(1, length(env_idx), 2), function(y){
c(env_idx[y], env_idx[y+1])
})
env_names <- trimws(gsub("::: (.+)", "\\1", y[sapply(env_pair, "[[", 1)]))
for (idx in 1:length(env_pair)) {
ix <- env_pair[[idx]]
ename <- env_names[idx]
x[ix[1]] <- gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), x[ix[1]])
x[ix[2]] <- gsub(":::", paste0("\\\\end{", ename, "}"), x[ix[2]])
}
x
env_names
if (is.function(post)) output = post(metadata, input, output, clean, verbose)
f <- xfun::with_ext(output, '.tex')
x <- xfun::read_utf8(f)
env_idx <- grep(":::", x)
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_pair <- lapply(seq(1, length(env_idx), 2), function(y){
c(env_idx[y], env_idx[y+1])
})
env_names <- trimws(gsub("::: (.+)", "\\1", y[sapply(env_pair, "[[", 1)]))
env_names
x
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
prec
pre
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
input
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
txt
xfun::read_utf8(input_file)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
bookdown:::process_markdown
library(nmbutemplates)
bookdown:::process_markdown
rmarkdown::render("stat123.Rmd")
input_file
x <- xfun::read_utf8(txt$input_file)
x <- xfun::read_utf8(input_file)
x
x <- parse_answer_block(x)
x
x <- xfun::read_utf8(input_file)
x <- parse_answer_block(x)
x
x <- xfun::read_utf8(input_file)
x
parse_answer_block(text_input = x)
parse_answer_block <- function(text_input) {
x <- text_input
env_idx <- grep(":::", x)
if (length(env_idx) %% 2) stop("Non closing custom block exists")
env_pair <- lapply(seq(1, length(env_idx), 2), function(y){
c(env_idx[y], env_idx[y+1])
})
env_names <- trimws(gsub("::: (.+)", "\\1", x[sapply(env_pair, "[[", 1)]))
for (idx in 1:length(env_pair)) {
ix <- env_pair[[idx]]
ename <- env_names[idx]
x[ix[1]] <- gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), x[ix[1]])
x[ix[2]] <- gsub(":::", paste0("\\\\end{", ename, "}"), x[ix[2]])
}
return(x)
}
parse_answer_block(text_input = x)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
env_pair
x
env_pair
for (i in env_pair) {
x <- x[-c(i[1]:i[2])]
}
x
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
env_pair
x
i
x[-c(i[1]:i[2])]
i[1]:i[2]
-c(i[1]:i[2])
x[-c(i[1]:i[2])]
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
show_answer
rmarkdown::render("stat123.Rmd")
show_answer
x
parse_answer_block(x, show_answer)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
env_pari
env_pair
for (i in env_pair) {
browser()
x <- x[-c(i[1]:i[2])]
}
i
x <- x[-c(i[1]:i[2])]
x
i
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
x
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
env_pair
lapply(env_pair, seq)
mapply(seq, env_pair)
lapply(env_pair, mapply, seq)
lapply(env_pair, purrr::map)
env_pair
lapply(env_pair, do.call, seq)
lapply(env_pair, function(x) do.call(seq, x))
lapply(env_pair, function(x) do.call(seq, as.list(x)))
lapply(env_pair, `:`)
lapply(env_pair, sapply, ":")
lapply(env_pair, function(x) seq(x[1], x[2]))
lapply(env_pair, function(x) seq(x[1], x[2]))
sapply(env_pair, function(x) seq(x[1], x[2]))
unlist(lapply(env_pair, function(x) seq(x[1], x[2])))
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
rm(list = ls())
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
show
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
xfun::write_utf8(x)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
pre
metadata$output$nmbutemplates::exam_question
metadata$output
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
gsub("::: (.+)", paste0("\\\\begin{", ename, "}"), x[ix[1]])
gsub("::: (.+)", "Answer:", x[ix[1]])
x[ix[1]] <- gsub("::: (.+)", "Answer:", x[ix[1]])
x
x[ix[2]]
ix[2]
x[-ix[2]]
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
grepl(":::", x)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
parse_custom_block(x, show_answer)
as.list(...)
str(...)
pre
runtime
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
knit_meta
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
knit_meta
?knit_meta
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
parse_custom_block(x, show_answer)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
filename
base$pandoc$to <- "latex"
base$pandoc$ext <- ".tex"
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
tinytex::latexmk("RJwrapper.tex", base$pandoc$latex_engine, clean = clean)
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
x
x <- gsub('\\\\textbackslash ', '\\', x)
x <- gsub('\\\\{', '{', x)
x <- gsub('\\\\}', '}', x)
x <- xfun::read_utf8(f)
x <- gsub('\\\\textbackslash ', '\\', x)
x
x <- xfun::read_utf8(f)
x <- gsub('\\\\textbackslash ', '\\\\', x)
x
x <- gsub('\\\\{', '{', x)
x <- gsub('\\\\\{', '\{', x)
x <- gsub('\\\\\\{', '{', x)
x
x <- gsub('\\\\\\}', '}', x)
x
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
rmarkdown::render("stat123.Rmd")
library(nmbutemplates)
library(nmbutemplates)
library(nmbutemplates)
q("no")
